# Minimum required version of CMake
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
IF(COMMAND CMAKE_POLICY)
	CMAKE_POLICY(SET CMP0003 NEW)
ENDIF(COMMAND CMAKE_POLICY)

add_definitions(-g)

IF(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)
   IF(WIN32)
      SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin CACHE INTERNAL "Single output directory for building all libraries.")
   ELSE(WIN32)
      SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib CACHE INTERNAL "Single output directory for building all libraries.")
   ENDIF(WIN32)
ENDIF(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)
IF(NOT CMAKE_ARCHIVE_OUTPUT_DIRECTORY)
   SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib CACHE INTERNAL "Single output directory for building all archives.")
ENDIF(NOT CMAKE_ARCHIVE_OUTPUT_DIRECTORY)
IF(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)
   SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin CACHE INTERNAL "Single output directory for building all executables.")
ENDIF(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)

IF(NOT ${CMAKE_GENERATOR} STREQUAL "Xcode")
	FOREACH(CFG_TYPE ${CMAKE_CONFIGURATION_TYPES})
		STRING(TOUPPER "${CFG_TYPE}" CFG_TYPE)
		IF(NOT "CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CFG_TYPE}")
			IF(WIN32)
				SET("CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CFG_TYPE}" ${CMAKE_BINARY_DIR}/bin CACHE INTERNAL "Single output directory for building ${CFG_TYPE} libraries.")
			ELSE(WIN32)
				SET("CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CFG_TYPE}" ${CMAKE_BINARY_DIR}/lib CACHE INTERNAL "Single output directory for building ${CFG_TYPE} libraries.")
			ENDIF(WIN32)
		ENDIF(NOT "CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CFG_TYPE}")
		IF(NOT "CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${CFG_TYPE}")
			SET("CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${CFG_TYPE}" ${CMAKE_BINARY_DIR}/lib CACHE INTERNAL "Single output directory for building ${CFG_TYPE} archives.")
		ENDIF(NOT "CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${CFG_TYPE}")
		IF(NOT "CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CFG_TYPE}")
			SET("CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CFG_TYPE}" ${CMAKE_BINARY_DIR}/bin CACHE INTERNAL "Single output directory for building ${CFG_TYPE} executables.")
		ENDIF(NOT "CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CFG_TYPE}")
	ENDFOREACH()
ENDIF(NOT ${CMAKE_GENERATOR} STREQUAL "Xcode")

ADD_SUBDIRECTORY(tcl)
SET(TCL_SRC_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/tcl)
SET(TCL_BIN_PREFIX ${CMAKE_CURRENT_BINARY_DIR}/lib)
SET(TCL_LIBRARY tcl CACHE STRING "TCL_LIBRARY" FORCE)
SET(TCL_STUB_LIBRARY tclstub CACHE STRING "TCL_STUB_LIBRARY" FORCE)
SET(TCL_TCLSH tclsh)
get_directory_property(TCL_INCLUDE_DIRS DIRECTORY tcl DEFINITION TCL_INCLUDE_DIRS)
ADD_SUBDIRECTORY(tk)
SET(TK_SRC_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/tk)
SET(TK_BIN_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/lib)
SET(TK_LIBRARY tk CACHE STRING "TK_LIBRARY" FORCE)
SET(TK_STUB_LIBRARY tkstub CACHE STRING "TK_STUB_LIBRARY" FORCE)
SET(TCL_WISH_EXECUTABLE wish)
get_directory_property(TK_SYSTEM_GRAPHICS DIRECTORY tk DEFINITION	TK_SYSTEM_GRAPHICS)
get_directory_property(TK_INCLUDE_PATH DIRECTORY tk DEFINITION TK_INCLUDE_PATH)

# Extensions

ADD_SUBDIRECTORY(incrTcl/itcl)
SET(ITCL_SRC_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/incrTcl/itcl)
SET(ITCL_BIN_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/lib)
SET(ITCL_LIBRARY itcl CACHE STRING "ITCL_LIBRARY" FORCE)
SET(ITCL_STUB_LIBRARY itclstub CACHE STRING "ITCL_STUB_LIBRARY" FORCE)

ADD_SUBDIRECTORY(incrTcl/itk)

# Togl is not building yet with Win32
IF(NOT WIN32)
   ADD_SUBDIRECTORY(togl)
ENDIF(NOT WIN32)

ADD_SUBDIRECTORY(tkhtml)

ADD_SUBDIRECTORY(sqlite3)

ADD_SUBDIRECTORY(hv3)
