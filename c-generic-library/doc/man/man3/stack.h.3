.TH "/Users/matthieuriolo/Downloads/libgenc/branches/riolo/trunk/include/stack.h" 3 "Wed Jan 11 2012" ""c generic library"" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/matthieuriolo/Downloads/libgenc/branches/riolo/trunk/include/stack.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'gen/data_types.h'\fP
.br
\fC#include 'gen/gen_macros.h'\fP
.br
\fC#include 'gen/function_macros.h'\fP
.br
\fC#include 'gen/function_signatures.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBSTACKLIST_DEFINED\fP"
.br
.ti -1c
.RI "#define \fBSTACKLIST_ITER_DEFINED\fP"
.br
.RI "\fIthe iterator object that helps traverse the stack \fP"
.ti -1c
.RI "#define \fBconvert_StackList\fP(A, B, C, D)   push_StackList((A),(B),(C),(D))"
.br
.ti -1c
.RI "#define \fBSTACKVECTOR_DEFINED\fP"
.br
.ti -1c
.RI "#define \fBSTACKVECTOR_ITER_DEFINED\fP"
.br
.ti -1c
.RI "#define \fBconvert_StackVector\fP(A, B, C, D)   push_StackVector((A),(B),(C),(D))"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct _stack_list \fBStackList\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "struct \fB_ptr_iter\fP \fBITER\fP (\fBStackList\fP)"
.br
.ti -1c
.RI "int8_t \fBpop_StackList\fP (\fBStackList\fP *stack)"
.br
.RI "\fIpops the first item off the stack \fP"
.ti -1c
.RI "void * \fBtop_StackList\fP (\fBStackList\fP *stack)"
.br
.RI "\fIreturns a pointer to the top of the stack so it can be easily referenced \fP"
.ti -1c
.RI "\fBcreate_iter_prototypes\fP (\fBStackList\fP) typedef struct \fB_array_struct\fP \fBStackVector\fP"
.br
.ti -1c
.RI "struct \fB_array_iter\fP \fBITER\fP (\fBStackVector\fP)"
.br
.ti -1c
.RI "\fBCOMMON_FUNCTION_PROTOTYPES\fP (\fBStackVector\fP) int8_t pop_StackVector(\fBStackVector\fP *stack)"
.br
.ti -1c
.RI "void * \fBtop_StackVector\fP (\fBStackVector\fP *stack)"
.br
.ti -1c
.RI "int8_t \fBpush_StackVector\fP (\fBStackVector\fP *stack, void *\fBobj\fP, size_t \fBobjsize\fP, int \fBflag\fP)"
.br
.ti -1c
.RI "int8_t \fBresize_StackVector\fP (\fBStackVector\fP *stack, size_t size)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "void * \fBobj\fP"
.br
.ti -1c
.RI "void size_t \fBobjsize\fP"
.br
.ti -1c
.RI "void size_t int8_t \fBflag\fP"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define convert_StackList(A, B, C, D)   push_StackList((A),(B),(C),(D))"
.PP
Definition at line 50 of file stack.h.
.SS "#define convert_StackVector(A, B, C, D)   push_StackVector((A),(B),(C),(D))"
.PP
Definition at line 91 of file stack.h.
.SS "#define STACKLIST_DEFINED"
.PP
Definition at line 24 of file stack.h.
.SS "#define STACKLIST_ITER_DEFINED"
.PP
the iterator object that helps traverse the stack 
.PP
Definition at line 33 of file stack.h.
.SS "#define STACKVECTOR_DEFINED"
.SS "#define STACKVECTOR_ITER_DEFINED"
.PP
Definition at line 81 of file stack.h.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct _stack_list \fBStackList\fP"
.PP
Definition at line 25 of file stack.h.
.SH "Function Documentation"
.PP 
.SS "COMMON_FUNCTION_PROTOTYPES (\fBStackVector\fP)"
.SS "create_iter_prototypes (\fBStackList\fP)"
.SS "struct \fB_ptr_iter\fP ITER (\fBStackList\fP)\fC [read]\fP"
.SS "struct \fB_array_iter\fP ITER (\fBStackVector\fP)\fC [read]\fP"
.SS "int8_t pop_StackList (\fBStackList\fP * stack)"
.PP
pops the first item off the stack \fBParameters:\fP
.RS 4
\fIstack\fP the stack to remove the top item from 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, non-zero on failure 
.RE
.PP

.PP
Definition at line 51 of file stack.c.
.SS "int8_t push_StackVector (\fBStackVector\fP * stack, void * obj, size_t objsize, int flag)"
.PP
Definition at line 167 of file stack.c.
.SS "int8_t resize_StackVector (\fBStackVector\fP * stack, size_t size)"
.PP
Definition at line 180 of file stack.c.
.SS "void* top_StackList (\fBStackList\fP * stack)"
.PP
returns a pointer to the top of the stack so it can be easily referenced \fBParameters:\fP
.RS 4
\fIstack\fP the stack to return the top object from 
.RE
.PP
\fBReturns:\fP
.RS 4
the object on success, NULL on failure 
.RE
.PP

.PP
Definition at line 69 of file stack.c.
.SS "void* top_StackVector (\fBStackVector\fP * stack)"
.PP
Definition at line 152 of file stack.c.
.SH "Variable Documentation"
.PP 
.SS "void size_t int8_t \fBflag\fP"
.PP
Definition at line 47 of file stack.h.
.SS "void* \fBobj\fP"
.PP
Definition at line 47 of file stack.h.
.SS "void size_t \fBobjsize\fP"
.PP
Definition at line 47 of file stack.h.
.SH "Author"
.PP 
Generated automatically by Doxygen for 'c generic library' from the source code.
