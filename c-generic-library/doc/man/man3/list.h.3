.TH "/Users/matthieuriolo/Downloads/libgenc/branches/riolo/trunk/include/list.h" 3 "Wed Jan 11 2012" ""c generic library"" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/matthieuriolo/Downloads/libgenc/branches/riolo/trunk/include/list.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'gen/data_types.h'\fP
.br
\fC#include 'gen/gen_macros.h'\fP
.br
\fC#include 'gen/function_macros.h'\fP
.br
\fC#include 'gen/function_signatures.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBLIST_DEFINED\fP"
.br
.ti -1c
.RI "#define \fBLIST_ITER_DEFINED\fP"
.br
.ti -1c
.RI "#define \fBconvert_List\fP(A, B, C, D)   push_back_List((A),(B),(C),(D))"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fB_ptr_struct\fP \fBList\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "struct \fB_ptr_iter\fP \fBITER\fP (\fBList\fP)"
.br
.ti -1c
.RI "int8_t \fBpush_back_List\fP (\fBList\fP *list, void *\fBobj\fP, size_t \fBobjsize\fP, int \fBflag\fP)"
.br
.ti -1c
.RI "int8_t \fBpop_front_List\fP (\fBList\fP *list)"
.br
.ti -1c
.RI "int8_t \fBpop_back_List\fP (\fBList\fP *list)"
.br
.ti -1c
.RI "void * \fBfront_List\fP (\fBList\fP *list)"
.br
.ti -1c
.RI "void * \fBback_List\fP (\fBList\fP *list)"
.br
.ti -1c
.RI "void * \fBinsert_List\fP (\fBList\fP *list, void *\fBobj\fP, size_t \fBobjsize\fP, int \fBflag\fP)"
.br
.ti -1c
.RI "int8_t \fBdelete_List\fP (\fBList\fP *list, void *\fBobj\fP, size_t \fBobjsize\fP)"
.br
.ti -1c
.RI "int8_t \fBsort_List\fP (\fBList\fP *list, size_t \fBobjsize\fP)"
.br
.ti -1c
.RI "int8_t \fBrsort_List\fP (\fBList\fP *list, size_t \fBobjsize\fP)"
.br
.ti -1c
.RI "void * \fBfind_List\fP (\fBList\fP *list, void *\fBobj\fP, size_t \fBobjsize\fP)"
.br
.ti -1c
.RI "void * \fBto_array_List\fP (\fBList\fP *list, size_t \fBobjsize\fP)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "void * \fBobj\fP"
.br
.ti -1c
.RI "void size_t \fBobjsize\fP"
.br
.ti -1c
.RI "void size_t int \fBflag\fP"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define convert_List(A, B, C, D)   push_back_List((A),(B),(C),(D))"
.PP
Definition at line 55 of file list.h.
.SS "#define LIST_DEFINED"
.PP
Definition at line 22 of file list.h.
.SS "#define LIST_ITER_DEFINED"
.PP
Definition at line 31 of file list.h.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fB_ptr_struct\fP \fBList\fP"
.PP
Definition at line 23 of file list.h.
.SH "Function Documentation"
.PP 
.SS "void* back_List (\fBList\fP * list)"\fBParameters:\fP
.RS 4
\fIlist\fP the list to get the back object from 
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to obj on success, NULL otherwise 
.RE
.PP

.PP
Definition at line 195 of file list.c.
.SS "int8_t delete_List (\fBList\fP * list, void * obj, size_t objsize)"\fBParameters:\fP
.RS 4
\fIlist\fP the list to delete the object from 
.br
\fIobj\fP a pointer to the object to be deleted 
.br
\fIobjsize\fP the size of the object being deleted 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on sucess, non-zero on error 
.RE
.PP

.PP
Definition at line 277 of file list.c.
.SS "void* find_List (\fBList\fP * list, void * obj, size_t objsize)"\fBParameters:\fP
.RS 4
\fIlist\fP the list to search the object for 
.br
\fIobj\fP the object to find in the list 
.br
\fIobjsize\fP the size of the object to find 
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to object on success, NULL on error 
.RE
.PP

.PP
Definition at line 300 of file list.c.
.SS "void* front_List (\fBList\fP * list)"\fBParameters:\fP
.RS 4
\fIlist\fP the list to get the front object from 
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to obj on success, NULL otherwise 
.RE
.PP

.PP
Definition at line 187 of file list.c.
.SS "void* insert_List (\fBList\fP * list, void * obj, size_t objsize, int flag)"\fBParameters:\fP
.RS 4
\fIlist\fP the list to insert the object into 
.br
\fIobj\fP a pointer to the object to insert 
.br
\fIobjsize\fP the size of the object being inserted 
.br
\fIflag\fP dynamic or static flag 
.RE
.PP
\fBReturns:\fP
.RS 4
ptr to object, NULL on error 
.RE
.PP

.PP
Definition at line 203 of file list.c.
.SS "struct \fB_ptr_iter\fP ITER (\fBList\fP)\fC [read]\fP"
.PP
Definition at line 416 of file list.c.
.SS "int8_t pop_back_List (\fBList\fP * list)"\fBParameters:\fP
.RS 4
\fIlist\fP the list to pop the back object off of 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, non-zero on failure 
.RE
.PP

.PP
Definition at line 169 of file list.c.
.SS "int8_t pop_front_List (\fBList\fP * list)"\fBParameters:\fP
.RS 4
\fIlist\fP the list to pop the front object off of 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, non-zero on failure 
.RE
.PP

.PP
Definition at line 151 of file list.c.
.SS "int8_t push_back_List (\fBList\fP * list, void * obj, size_t objsize, int flag)"\fBParameters:\fP
.RS 4
\fIlist\fP the list to push the object onto 
.br
\fIobj\fP the object to push to the back of the list 
.br
\fIobjsize\fP the size of the object 
.br
\fIflag\fP dynamic or static flag 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, non-zero on failure 
.RE
.PP

.PP
Definition at line 127 of file list.c.
.SS "int8_t rsort_List (\fBList\fP * list, size_t objsize)"
.SS "int8_t sort_List (\fBList\fP * list, size_t objsize)"\fBParameters:\fP
.RS 4
\fIlist\fP the list to sort the objects in 
.br
\fIobjsize\fP the size of the objects being sorted 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, non-zero on error 
.RE
.PP

.PP
Definition at line 318 of file list.c.
.SS "void* to_array_List (\fBList\fP * list, size_t objsize)"\fBParameters:\fP
.RS 4
\fIlist\fP the list to turn into an array 
.br
\fIobjsize\fP the size of the objects in the list 
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to array or null on error 
.RE
.PP

.PP
Definition at line 400 of file list.c.
.SH "Variable Documentation"
.PP 
.SS "void size_t int \fBflag\fP"
.PP
Definition at line 44 of file list.h.
.SS "void* \fBobj\fP"
.PP
Definition at line 44 of file list.h.
.SS "void size_t \fBobjsize\fP"
.PP
Definition at line 44 of file list.h.
.SH "Author"
.PP 
Generated automatically by Doxygen for 'c generic library' from the source code.
