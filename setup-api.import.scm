;;;; setup-api.import.scm - GENERATED BY CHICKEN 4.6.7 -*- Scheme -*-

(eval '(import
         scheme
         chicken
         foreign
         irregex
         utils
         posix
         ports
         extras
         data-structures
         srfi-1
         srfi-13
         files))
(##sys#register-compiled-module
  'setup-api
  (list '(execute . setup-api#execute))
  '((standard-extension . setup-api#standard-extension)
    (make/proc . setup-api#make/proc)
    (host-extension . setup-api#host-extension)
    (install-extension . setup-api#install-extension)
    (install-program . setup-api#install-program)
    (install-script . setup-api#install-script)
    (setup-verbose-mode . setup-api#setup-verbose-mode)
    (setup-install-mode . setup-api#setup-install-mode)
    (deployment-mode . setup-api#deployment-mode)
    (installation-prefix . setup-api#installation-prefix)
    (destination-prefix . setup-api#destination-prefix)
    (runtime-prefix . setup-api#runtime-prefix)
    (chicken-prefix . setup-api#chicken-prefix)
    (find-library . setup-api#find-library)
    (find-header . setup-api#find-header)
    (program-path . setup-api#program-path)
    (remove-file* . setup-api#remove-file*)
    (patch . setup-api#patch)
    (abort-setup . setup-api#abort-setup)
    (setup-root-directory . setup-api#setup-root-directory)
    (create-directory/parents . setup-api#create-directory/parents)
    (test-compile . setup-api#test-compile)
    (try-compile . setup-api#try-compile)
    (run-verbose . setup-api#run-verbose)
    (extra-features . setup-api#extra-features)
    (extra-nonfeatures . setup-api#extra-nonfeatures)
    (copy-file . setup-api#copy-file)
    (move-file . setup-api#move-file)
    (required-chicken-version . setup-api#required-chicken-version)
    (required-extension-version . setup-api#required-extension-version)
    (sudo-install . setup-api#sudo-install)
    (keep-intermediates . setup-api#keep-intermediates)
    (version>=? . setup-api#version>=?)
    (extension-name-and-version . setup-api#extension-name-and-version)
    (extension-name . setup-api#extension-name)
    (extension-version . setup-api#extension-version)
    (remove-directory . setup-api#remove-directory)
    (remove-extension . setup-api#remove-extension)
    (read-info . setup-api#read-info)
    (register-program . setup-api#register-program)
    (find-program . setup-api#find-program)
    (shellpath . setup-api#shellpath)
    (setup-error-handling . setup-api#setup-error-handling))
  (list (cons 'make
              (lambda (form r c)
                (##sys#check-syntax 'make form '(_ _ . #(_ 0 1)))
                (let ((spec (cadr form))
                      (%list (r 'list))
                      (%lambda (r 'lambda)))
                  (let ((form-error (lambda (s . p) (apply error s spec p))))
                    (and (or (list? spec)
                             (form-error
                               "illegal specification (not a sequence)"))
                         (or (pair? spec) (form-error "empty specification"))
                         (every (lambda (line)
                                  (and (or (and (list? line) (>= (length line) 2))
                                           (form-error
                                             "clause does not have at least 2 parts"
                                             line))
                                       (let ((name (car line)))
                                         (or (list? (cadr line))
                                             (make:line-error
                                               "second part of clause is not a sequence"
                                               (cadr line)
                                               name)))))
                                spec))
                    `(,(r 'make/proc)
                      (list ,@(map (lambda (line)
                                     `(,%list
                                       ,(car line)
                                       (,%list ,@(cadr line))
                                       ,@(let ((l (cddr line)))
                                           (if (null? l) '() `((,%lambda () ,@l))))))
                                   spec))
                      ,@(if (null? (cddr form)) '('()) (cddr form)))))))
        (cons 'compile (syntax-rules () ((_ exp ...) (run (csc exp ...)))))
        (cons 'run (syntax-rules () ((_ exp ...) (execute (list `exp ...))))))
  (list (cons 'ignore-errors
              (syntax-rules
                ()
                ((_ body ...) (handle-exceptions ex #f body ...))))))

;; END OF FILE
